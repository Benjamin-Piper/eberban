# GRAMMAR
# main rule (used for tests, real text rule TODO)
text <- (paragraph+ / predicate*) space? EOF?

# paragraphs
paragraph <- p_paragraph_open+ predicate*

# predicate afterthough connectives
predicate <- predicate_1 (p_predicate_open_elidible relation_connective predicate_1)*
# pre-tail terms
predicate_1 <- predicate_pre / p_predicate_open_elidible predicate_place* p_predicate_tail_open_elidible predicate_tail p_predicate_close_elidible
# forethough connected predicates
predicate_pre <- (pre_relation_connective p_predicate_open predicate (pre_connective_separator predicate)+ p_pre_connective_close_elidible)

# predicate-tail afterthough connectives
predicate_tail <- predicate_tail_1 (predicate_tail_connective p_predicate_tail_open_elidible predicate_tail_1 predicate_tail_terms )*
# predicate-tail negation
predicate_tail_1 <- p_neg_pre* predicate_tail_2
# simple predicate-tail / forethough connected tails
predicate_tail_2 <- relation predicate_tail_terms / predicate_tail_pre

# forethough connected tails structure
predicate_tail_pre <- (pre_predicate_tail_connective p_predicate_tail_open_elidible predicate_tail (pre_connective_separator p_predicate_tail_open_elidible predicate_tail)+ p_pre_connective_close_elidible) predicate_tail_terms

# terms followed by predicate-tail elidible terminator
predicate_tail_terms <- predicate_place* p_predicate_tail_close_elidible
# place + term
predicate_place <- p_predicate_place predicate_term
# term afterthought connectives
predicate_term <- predicate_term_1 (predicate_tail_connective !p_predicate_tail_open predicate_term_1)*
# simple relation term / forethough connected terms
predicate_term_1 <- relation / predicate_term_pre

# forethough connected term structure
predicate_term_pre <- (pre_predicate_tail_connective !p_predicate_tail_open predicate_term (pre_connective_separator !p_predicate_tail_open predicate_term)+ p_pre_connective_close_elidible)

# relation compounds
relation <- relation_2+ 
# relation afterthough connectives
relation_2 <- relation_3 (relation_connective !p_predicate_open relation_3)*
# basic relations
relation_3 <- relation_pre / lemma / borrowing / grammatical_quote / one_word_quote / ungrammatical_quote / foreign_quote / abstraction / relation_place_swap / scoped_relation / space? lexeme

# forethough connected relations
relation_pre <- (pre_relation_connective !p_predicate_open relation (pre_connective_separator relation)+ p_pre_connective_close_elidible)

# lemma prefixes
lemma <- lemma_1 / lemma_2 / lemma_3 / lemma_4  / lemma_n
lemma_1 <- p_lemma_1 lemma_word
lemma_2 <- p_lemma_2 lemma_word lemma_word
lemma_3 <- p_lemma_3 lemma_word lemma_word lemma_word
lemma_4 <- p_lemma_4 lemma_word lemma_word lemma_word lemma_word
lemma_n <- p_lemma_n (!p_lemma_n word)+ p_lemma_n
lemma_word <- initial_dot word

# borrowings
borrowing <- p_borrowing_n_open borrowing_content dot? (space_char / EOF)
borrowing_content <- space_char initial_dot foreign_word (!space word)*

# quotes
grammatical_quote <- p_grammatical_quote_open text p_grammatical_quote_close
one_word_quote <- p_one_word_quote space? word
ungrammatical_quote <- p_ungrammatical_quote_open (!p_ungrammatical_quote_close space? word) p_ungrammatical_quote_close
foreign_quote <- p_foreign_quote (space?) foreign_quote_open space (foreign_quote_word space)* foreign_quote_close

# abstractions
abstraction <- p_abstraction_open predicate p_abstraction_close_elidible

# relation place swap
relation_place_swap <- p_place_swap relation_3

# scoped relation
scoped_relation <- p_scope_open relation p_scope_close_elidible

# afterthough connectives
predicate_tail_connective <- p_neg_pre? p_place_swap? p_predicate_tail_connective p_neg_post?
relation_connective <- p_neg_pre? p_place_swap? p_relation_connective p_neg_post?

# forethough connectives
pre_predicate_tail_connective <- p_pre_connective_open p_place_swap? p_predicate_tail_connective p_neg_post?
pre_relation_connective <- p_pre_connective_open p_place_swap? p_relation_connective p_neg_post?
pre_connective_separator <- p_pre_connective_separator p_neg_post?

# PARTICLES
# - Lexicalized relation
#   A string of words (particles and/or relations) can be lexicalized to have a unique relation meaning.
#   Each word is stripped from its grammar while keeping its meaning.
#
#   The particle depends on how many words form the lexicalized relation. 
#   More than 4 words requires a closing particle.
p_lemma_1 <- space? (a)
p_lemma_2 <- space? (e)
p_lemma_3 <- space? (i)
p_lemma_4 <- space? (o)
p_lemma_n <- space? (u)

# - Abstractions
#   x1 is abstraction of [predicate] ...
p_abstraction_open <- !p_abstraction_close space? (b (vowel / diphtong)) 
p_abstraction_close_elidible <- p_abstraction_close?
p_abstraction_close <- space? (b a i) 

# - Foreign relation
#   A string of words used without their meaning to express some foreign concept.
#   x1 is [foreign concept].
#
#   The foreign relation stops after the first pause (ignoring initial pause due
#   to a first vowel word)
p_borrowing_n_open <- space? (m a)

# - Grammatical quotation
#   Quote a grammatical valid text
#   x1 is text [quoted text]
p_grammatical_quote_open <- space? (m e)
p_grammatical_quote_close <- space? (m e i)

# - One word quote
#   x1 is text [quoted word]
p_one_word_quote <- space? (m i)

# - Unrammatical quotation
#   Quote an ungrammatical valid text
#   x1 is text [quoted text]
p_ungrammatical_quote_open <- space? (m o)
p_ungrammatical_quote_close <- space? (m o i)

# - Free quote
#   Quote any string with provided quote word.
#   x1 is text [quoted text]
p_foreign_quote <- space? (m u)

# - Relation place swaping
p_place_swap <- space? (s (vowel / e i)) # name / 2 / 3 / 4 / 5 / question

# - Predicate numeral place tag
p_predicate_place <- space? (f vowel / v i / v o)  # 1..5 places / next numeral place / place question

# - Paragraph
p_paragraph_open_elidible <- p_paragraph_open?
p_paragraph_open <- space? (v a h a)

# - Predicate
p_predicate_open_elidible <- p_predicate_open?
p_predicate_open <- space? (v a)
p_predicate_close_elidible <- p_predicate_close?
p_predicate_close <- space? (v a i)

# - Predicate tail
p_predicate_tail_open_elidible <- p_predicate_tail_open? 
p_predicate_tail_open <- space? (v e)
p_predicate_tail_close_elidible <- (space? (v e i))?

# - Forethought connectives
p_pre_connective_open <- space? (g a)
p_pre_connective_separator <- space? (g i)
p_pre_connective_close_elidible <- p_pre_connective_close?
p_pre_connective_close <- space? (g a i)

# - Afterthough predicate tail connectives
# todo : add mass/set predicate connectives
p_predicate_tail_connective <- space? (j vowel)  # a/e/o/u + i question

# - Afterthough relation (and predicate) connectives
p_relation_connective <- space? (c vowel)  # a/e/o/u + i question

# - Negations
p_neg_pre <- space? (n a) 
p_neg_post <- space? (n a i) 

# - Scoping
p_scope_open <- space? (g o)
p_scope_close_elidible <- (space? (g o i))?

# - Literals
p_letter <- space? (consonant y / vowel_y h y / (i / u) y h y / vi_diphtong h y / y h y )  # consonant / vowel / semi-vowel / h

# MORPHOLOGY
# - Forein text quoting
foreign_quote_open <- word
foreign_quote_word <- (!space .)+ 
foreign_quote_close <- word

# - Legal words
foreign_word <- (consonant / initial_consonant_pair)? vowel_tail (consonant_cluster vowel_tail)* (consonant consonant)?
word <-  lexeme / particle
particle <- consonant? vowel_tail 
lexeme <- (initial_consonant_pair vowel_tail coda?) / (!coda consonant vowel_tail coda)

# - Legal vowels and vowel tails
vowel_tail <- (diphtong / vowel_y) (h (vi_diphtong / vowel_y ))* 

diphtong <- iuv_diphtong / vi_diphtong
iuv_diphtong <- (i / u) vowel_y
vi_diphtong <- (a / e / o / y) i 
vowel_y <- vowel / y 
vowel <- a / e / i / o / u 
h <- ['h] # <LEAF>
a <- [aA] # <LEAF>
e <- [eE] # <LEAF>
i <- [iI] # <LEAF>
o <- [oO] # <LEAF>
u <- [uU] # <LEAF>
y <- [yY] # <LEAF>

# - Legal consonant and consonant pairs
consonant_cluster <- (consonant consonant*)
initial_consonant_pair <- (&initial consonant consonant !consonant)
initial <- (affricate / sibilant? other? liquid?) !consonant

consonant <- (voiced / unvoiced / coda) 
affricate <- (t c / t s / d j / d z) 
liquid <- (l / r) 
other <- (p / t !l / k / f / x / b / d !l / g / v / m / n !liquid) 
sibilant <- (c / s !x / (j / z) !n !liquid) 
coda <- (l / m / n / r) 
voiced <- (b / d / g / j / v / z) 
unvoiced <- (c / f / k / p / s / t / x) 
l <- [lL] !l # <LEAF>
m <- [mM] !m # <LEAF>
n <- [nN] !n !affricate # <LEAF>
r <- [rR] !r # <LEAF>
b <- [bB] !b !unvoiced # <LEAF>
d <- [dD] !d !unvoiced # <LEAF>
g <- [gG] !g !unvoiced # <LEAF>
v <- [vV] !v !unvoiced # <LEAF>
j <- [jJ] !j !z !unvoiced # <LEAF>
z <- [zZ] !z !j !unvoiced # <LEAF>
s <- [sS] !s !c !voiced # <LEAF>
c <- [cC] !c !s !x !voiced # <LEAF>
x <- [xX] !x !c !k !voiced # <LEAF>
k <- [kK] !k !x !voiced # <LEAF>
f <- [fF] !f !voiced # <LEAF>
p <- [pP] !p !voiced # <LEAF>
t <- [tT] !t !voiced # <LEAF>

# - Space / Pause
initial_dot <- (dot &vowel_y / !dot &consonant)
space <- space_1+ (dot &vowel)? / dot &vowel / EOF
space_1 <- space_char / hesitation space_char
hesitation <- space_char+ dot? y+ dot? space_char+ 

# - Special characters
dot <- '.'
space_char <- [\t\n\r?!\u0020]
EOF <- !.