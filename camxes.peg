# GRAMMAR
text <- predicate EOF?

predicate <- predicate_term* predicate_tail 
predicate_tail <- predicate_tail_core 
predicate_tail_core <- p_predicate_tail_open_elidible relation predicate_term* p_predicate_tail_close_elidible 
predicate_term <- p_predicate_place relation 

relation <- relation_negation 
relation_negation <- p_neg_pre* relation_compound
relation_compound <- relation_core+ 
relation_core <- lexicalized_relation / foreign_relation / free_quote / abstraction / relation_word 

lexicalized_relation <- lexicalized_relation_1 / lexicalized_relation_2 / lexicalized_relation_3 / lexicalized_relation_4 / lexicalized_relation_5  / lexicalized_relation_n
lexicalized_relation_1 <- p_lexicalized_relation_1 word
lexicalized_relation_2 <- p_lexicalized_relation_2 word word
lexicalized_relation_3 <- p_lexicalized_relation_3 word word word
lexicalized_relation_4 <- p_lexicalized_relation_4 word word word word
lexicalized_relation_5 <- p_lexicalized_relation_5 word word word word word
lexicalized_relation_n <- p_lexicalized_relation_n_open (!p_lexicalized_relation_n_close word)+ p_lexicalized_relation_n_close

foreign_relation <- foreign_relation_1 / foreign_relation_2 / foreign_relation_3 / foreign_relation_4 / foreign_relation_5  / foreign_relation_n
foreign_relation_1 <- p_foreign_relation_1 word
foreign_relation_2 <- p_foreign_relation_2 word word
foreign_relation_3 <- p_foreign_relation_3 word word word
foreign_relation_4 <- p_foreign_relation_4 word word word word
foreign_relation_5 <- p_foreign_relation_5 word word word word word
foreign_relation_n <- p_foreign_relation_n_open (!p_foreign_relation_n_close word)+ p_foreign_relation_n_close

free_quote <- p_free_quote (space?) foreign_open space (foreign_word space)* foreign_close

abstraction <- p_abstraction_open predicate p_abstraction_close?

# PARTICLES (tmp)
# - Abstractions
#   x1 is abstraction of [predicate] ...
p_abstraction_open <- !p_abstraction_close space? (b vowel / diphtong) 
p_abstraction_close <- space? (b a i) 

# - Scoping
p_scope_open <- space? (k a)
p_scope_close <- space? (k a i)

# - Lexicalized relation
#   A string of words (particle or relation) can be lexicalized to have a unique relation meaning.
#
#   The particle depends on how many words form the lexicalized relation. 
#   More than 5 words requires a closing particle.
p_lexicalized_relation_1 <- space? (a)
p_lexicalized_relation_2 <- space? (e)
p_lexicalized_relation_3 <- space? (i)
p_lexicalized_relation_4 <- space? (o)
p_lexicalized_relation_5 <- space? (u)
p_lexicalized_relation_n_open <- space? (l a)
p_lexicalized_relation_n_close <- space? (l a i)

# - Foreign relation
#   A string of words (particle or relation) used without their meaning to express some foreign concept.
#   x1 is [foreign concept].
#
#   The particle depends on how many words form the foreign relation. 
#   More than 5 words requires a closing particle.
p_foreign_relation_1 <- space? (m a) 
p_foreign_relation_2 <- space? (m e)
p_foreign_relation_3 <- space? (m i)
p_foreign_relation_4 <- space? (m o)
p_foreign_relation_5 <- space? (m u)

p_foreign_relation_n_open <- space? (l e)
p_foreign_relation_n_close <- space? (l e i)

# - Free quote
#   Quote any string with provided quote word.
#   x1 is text [quoted text]
p_free_quote <- space? (l i)

# - Grammatical quotation
#   Quote a grammatical valid text
#   x1 is text [quoted text]
p_grammatical_quote_open <- space? (l o)
p_grammatical_quote_close <- space? (l o i)

# - Predicate numeral place tag
p_predicate_place <- space? (f vowel / f a i / c e)  # 1..5 places / place question / next numeral place

# - Predicate tail
p_predicate_tail_open_elidible <- (space? (c a))? 
p_predicate_tail_close_elidible <- (space? (c a i))?

# - Forethought connectives
p_pre_connective_open <- space? g a
p_pre_connective_separator <- space? g i
p_pre_connective_close <- space? g a i

# - Afterthought connectives
p_post_log_connective <- space? j vowel  # a/e/o/u + i question

# - Negations
p_neg_pre <- space? (n a) 
p_neg_post <- space? (n a i) 

# - Literals
p_letter <- space? (consonant y / vowel_y h y / (i / u) y h y / y i h y )  # consonant / vowel / semi-vowel / h

# MORPHOLOGY
# - Forein text quoting
foreign_open <- word
foreign_word <- (!space .)+ 
foreign_close <- word

# - Legal words
word <- particle_word / relation_word 
particle_word <- space? consonant? vowel_tail 
relation_word <- space? consonant_pair vowel_tail 

# - Legal vowels and vowel tails
vowel_tail <- (diphtong / vowel_y) (h (diphtong / vowel_y ))* 
diphtong <- (i / u) vowel_y / (a / e / o / y) i 
vowel_y <- vowel / y 
vowel <- a / e / i / o / u 
h <- ['h]
a <- [aA] 
e <- [eE] 
i <- [iI] 
o <- [oO] 
u <- [uU] 
y <- [yY] 

# - Legal consonant and consonant pairs
consonant_pair <- (&initial consonant consonant !consonant)
initial <- (affricate / sibilant? other? liquid?) !consonant

consonant <- (voiced / unvoiced / syllabic) 
affricate <- (t c / t s / d j / d z) 
liquid <- (l / r) 
other <- (p / t !l / k / f / x / b / d !l / g / v / m / n !liquid) 
sibilant <- (c / s !x / (j / z) !n !liquid) 
syllabic <- (l / m / n / r) 
voiced <- (b / d / g / j / v / z) 
unvoiced <- (c / f / k / p / s / t / x) 
l <- [lL] !l 
m <- [mM] !m 
n <- [nN] !n !affricate 
r <- [rR] !r 
b <- [bB] !b !unvoiced 
d <- [dD] !d !unvoiced 
g <- [gG] !g !unvoiced 
v <- [vV] !v !unvoiced 
j <- [jJ] !j !z !unvoiced 
z <- [zZ] !z !j !unvoiced 
s <- [sS] !s !c !voiced 
c <- [cC] !c !s !x !voiced 
x <- [xX] !x !c !k !voiced 
k <- [kK] !k !x !voiced 
f <- [fF] !f !voiced 
p <- [pP] !p !voiced 
t <- [tT] !t !voiced 

# - Space / Pause
space <- space_1+ (dot &vowel)? / dot &vowel
space_1 <- space_char / hesitation space_char
hesitation <- space_char+ dot? y+ dot? space_char+ 

# - Special characters
dot <- '.'
space_char <- [.\t\n\r?!\u0020]
EOF <- !.