# GRAMMAR
# main rule
text <- free_attitudinal* (paragraph+ / sentence*) spaces? EOF?

# paragraphs
paragraph <- DA_clause+ sentence*
# a sentence is either a predicate or a fragment
sentence <- predicate / fragments
# fragments : allow to answer questions without making a complete predicate
fragments <- DE_clause (predicate_place / FA_clause)*

# predicate afterthough connectives
predicate <- predicate_1 (DE_clause_elidible relation_connective predicate_1)*
# pre-tail terms
predicate_1 <- predicate_pre / DE_clause_elidible predicate_place* DO_clause_elidible predicate_tail DEI_clause_elidible
# forethough connected predicates
predicate_pre <- (pre_relation_connective DE_clause predicate (pre_connective_separator predicate)+ GAI_clause_elidible)

# predicate-tail afterthough connectives
predicate_tail <- predicate_tail_1 (predicate_tail_connective DO_clause_elidible predicate_tail_1 predicate_tail_terms )*
# predicate-tail negation
predicate_tail_1 <- KA_clause* predicate_tail_2
# simple predicate-tail / forethough connected tails
predicate_tail_2 <- relation predicate_tail_terms / predicate_tail_pre

# forethough connected tails structure
predicate_tail_pre <- (pre_predicate_tail_connective DO_clause_elidible predicate_tail (pre_connective_separator DO_clause_elidible predicate_tail)+ GAI_clause_elidible) predicate_tail_terms

# terms followed by predicate-tail elidible terminator
predicate_tail_terms <- predicate_place* DOI_clause_elidible
# place + term
predicate_place <- (DU_clause relation_3 / FA_clause) predicate_term
# term afterthought connectives
predicate_term <- predicate_term_1 (predicate_tail_connective !DO_clause predicate_term_1)*
# simple relation term / forethough connected terms
predicate_term_1 <- relation / predicate_term_pre

# forethough connected term structure
predicate_term_pre <- (pre_predicate_tail_connective !DO_clause predicate_term (pre_connective_separator !DO_clause predicate_term)+ GAI_clause_elidible)

# relation compounds
relation <- relation_2+ 
# relation afterthough connectives
relation_2 <- relation_3 (relation_connective !DA_clause relation_3)*
# basic relations
relation_3 <- relation_pre / flat_lexeme / grammatical_lexeme / borrowing / grammatical_quote / one_word_quote / ungrammatical_quote / foreign_quote / abstraction / relation_place_swap / scoped_relation / MA_clause / spaces? root free_post*

# forethough connected relations
relation_pre <- (pre_relation_connective !DA_clause relation (pre_connective_separator relation)+ GAI_clause_elidible)

# flat lexeme prefixes
flat_lexeme <- (flat_lexeme_1 / flat_lexeme_2 / flat_lexeme_3 / flat_lexeme_4  / flat_lexeme_n) free_post*
flat_lexeme_1 <- A_clause flat_lexeme_word
flat_lexeme_2 <- E_clause flat_lexeme_word flat_lexeme_word
flat_lexeme_3 <- I_clause flat_lexeme_word flat_lexeme_word flat_lexeme_word
flat_lexeme_4 <- O_clause flat_lexeme_word flat_lexeme_word flat_lexeme_word flat_lexeme_word
flat_lexeme_n <- U_clause (!(dot? U) flat_lexeme_word)+ (dot? U)
flat_lexeme_word <- initial_dot native_word

# grammatical lexeme
grammatical_lexeme <- GE_clause relation GEI_clause

# borrowings
# borrowing <- ZA_clause borrowing_content dot? free_post*

borrowing <- ZA_clause borrowing_content (dot !dot !y)? free_post*
borrowing_content <- spaces foreign_word (!spaces native_word)*

# quotes
grammatical_quote <- ZE_clause text ZEI_clause
one_word_quote <- ZI_clause spaces? native_word
ungrammatical_quote <- ZO_clause (!ZOI_clause spaces? native_word) ZOI_clause
foreign_quote <- ZU_clause (spaces?) foreign_quote_open spaces (foreign_quote_word spaces)* foreign_quote_close free_post*

# abstractions
abstraction <- BA_clause predicate BAI_clause_elidible

# relation place swap
relation_place_swap <- SA_clause relation_3

# scoped relation
scoped_relation <- GO_clause relation GOI_clause_elidible

# afterthough connectives
predicate_tail_connective <- KA_clause? SA_clause? JA_clause KAI_clause? free_post*
relation_connective <- KA_clause? SA_clause? CA_clause KAI_clause? free_post*

# forethough connectives
pre_predicate_tail_connective <- GA_clause SA_clause? JA_clause KAI_clause? free_post*
pre_relation_connective <- GA_clause SA_clause? CA_clause KAI_clause? free_post*
pre_connective_separator <- GI_clause KAI_clause? free_post*

# free prefix
free_prefix <- PA_clause

# free suffix
free_post <- PAI_clause / free_adverbial / free_attitudinal
free_adverbial <- PE_clause relation PEI_clause_elidible
free_attitudinal <- AHA_clause KAI_clause?

# PARTICLES CLAUSES
A_clause            <- free_prefix* spaces? A
AHA_clause          <- free_prefix* spaces? AHA
BA_clause           <- free_prefix* spaces? BA 
BAI_clause          <- free_prefix* spaces? BAI free_post*
BAI_clause_elidible <- BAI_clause?
CA_clause           <- free_prefix* spaces? CA
DA_clause           <- free_prefix* spaces? DA free_post*
DE_clause           <- free_prefix* spaces? DE free_post*
DE_clause_elidible  <- DE_clause?
DEI_clause          <- free_prefix* spaces? DEI free_post*
DEI_clause_elidible <- DEI_clause?
DO_clause           <- free_prefix* spaces? DO free_post*
DO_clause_elidible  <- DO_clause? 
DOI_clause          <- free_prefix* spaces? DOI free_post*
DOI_clause_elidible <- DOI_clause?
DU_clause           <- free_prefix* spaces? DU
E_clause            <- free_prefix* spaces? E
FA_clause           <- free_prefix* spaces? FA free_post*
GA_clause           <- free_prefix* spaces? GA
GAI_clause          <- free_prefix* spaces? GAI free_post*
GAI_clause_elidible <- GAI_clause?
GE_clause           <- free_prefix* spaces? GE
GEI_clause          <- free_prefix* spaces? GEI free_post*
GI_clause           <- free_prefix* spaces? GI
GO_clause           <- free_prefix* spaces? GO
GOI_clause          <- free_prefix* spaces? GOI free_post*
GOI_clause_elidible <- GOI_clause?
I_clause            <- free_prefix* spaces? I
JA_clause           <- free_prefix* spaces? JA
KA_clause           <- free_prefix* spaces? KA 
KAI_clause          <- free_prefix* spaces? KAI
MA_clause           <- free_prefix* spaces? MA free_post*
O_clause            <- free_prefix* spaces? O
PA_clause           <- spaces? PA
PAI_clause          <- spaces? PAI
PE_clause           <- free_prefix* spaces? PE
PEI_clause          <- free_prefix* spaces? PEI
PEI_clause_elidible <- PEI_clause?
SA_clause           <- free_prefix* spaces? SA
U_clause            <- free_prefix* spaces? U
# VA is in FA 
ZA_clause           <- free_prefix* spaces? ZA
ZE_clause           <- free_prefix* spaces? ZE
ZEI_clause          <- free_prefix* spaces? ZEI free_post*
ZI_clause           <- free_prefix* spaces? ZI
ZO_clause           <- free_prefix* spaces? ZO
ZOI_clause          <- free_prefix* spaces? ZOI free_post*
ZU_clause           <- free_prefix* spaces? ZU

# BY_clause           <- free_prefix* spaces? BY

# PARTICLE FAMILIES
A     <- &particle (a)
AHA   <- &particle (x vowel_tail / diphthong vowel_tail_1* / vowel vowel_tail_1+)
BA    <- &particle (!BAI b vowel_tail)
BAI   <- &particle (b a i)
CA    <- &particle (c vowel)
DA    <- &particle (d a)
DE    <- &particle (d e)
DEI   <- &particle (d e i)
DO    <- &particle (d o)
DOI   <- &particle (d o i)
DU    <- &particle (d u)
E     <- &particle (e)
FA    <- &particle (f vowel / v vowel)
GA    <- &particle (g a)
GAI   <- &particle (g a i)
GE    <- &particle (g e)
GEI   <- &particle (g e i)
GI    <- &particle (g i)
GO    <- &particle (g o)
GOI   <- &particle (g o i)
I     <- &particle (i)
JA    <- &particle (j vowel_tail)
KA    <- &particle (k a)
KAI   <- &particle (k a i)
MA    <- &particle (m vowel_tail)
O     <- &particle (o)
PA    <- &particle (p a)
PAI   <- &particle (p a i)
PE    <- &particle (p !a (diphthong / vowel))
PEI   <- &particle (p e i)
SA    <- &particle (s vowel_tail)
U     <- &particle (u)
# VA is in FA 
ZA    <- &particle (z a)
ZE    <- &particle (z e)
ZEI   <- &particle (z e i)
ZI    <- &particle (z i)
ZO    <- &particle (z o)
ZOI   <- &particle (z o i)
ZU    <- &particle (z u)

# BY    <- (consonant y / vowel_y h y / (i / u) y h y / vi_diphthong h y / y h y)

# MORPHOLOGY
# - Forein text quoting
foreign_quote_open <- native_word
foreign_quote_word <- (!spaces .)+ 
foreign_quote_close <- native_word

# - Legal words
foreign_word <- (initial_consonant_pair / consonant)? vowel_tail_y (consonant_cluster vowel_tail_y)* (consonant consonant / coda)?
native_word <-  root / particle
particle <- !coda consonant? vowel_tail !coda &post_word
root <- ((initial_consonant_pair vowel_tail_y) / (!coda consonant vowel_tail_y coda)) &post_word

# - Legal vowels and vowel tails
vowel_tail <- (diphthong / vowel) vowel_tail_1* 
vowel_tail_1 <- h (vi_diphthong / vowel )

vowel_tail_y <- (diphthong_y / vowel_y) vowel_tail_y_1* 
vowel_tail_y_1 <- h (vi_diphthong_y / vowel_y )

diphthong_y <- iuv_diphthong_y / vi_diphthong_y
iuv_diphthong_y <- (i / u) vowel_y
vi_diphthong_y <- (a / e / o / y) i 
vowel_y <- vowel / y 

diphthong <- iuv_diphthong / vi_diphthong
iuv_diphthong <- (i / u) vowel
vi_diphthong <- (a / e / o) i 
vowel <- a / e / i / o / u 

h <- ['h] # <LEAF>
a <- [aA] # <LEAF>
e <- [eE] # <LEAF>
i <- [iI] # <LEAF>
o <- [oO] # <LEAF>
u <- [uU] # <LEAF>
y <- [yY] # <LEAF>

# - Legal consonant and consonant pairs
consonant_cluster <- (!(coda coda coda) consonant consonant*)
initial_consonant_pair <- (&initial consonant consonant !consonant)
initial <- (affricate / sibilant? other? liquid?) !consonant
 
consonant <- (voiced / unvoiced / liquid / m / n) 
affricate <- (t c / t s / d j / d z) 
liquid <- (l / r) 
other <- (p / t !l / k / f / x / b / d !l / g / v / m / n !liquid) 
sibilant <- (c / s !x / (j / z) !n !liquid) 
coda <- (l / n / r)
voiced <- (b / d / g / j / v / z) 
unvoiced <- (c / f / k / p / s / t / x) 
l <- [lL] !l # <LEAF>
m <- [mM] !m # <LEAF>
n <- [nN] !n !affricate # <LEAF>
r <- [rR] !r # <LEAF>
b <- [bB] !b !unvoiced # <LEAF>
d <- [dD] !d !unvoiced # <LEAF>
g <- [gG] !g !unvoiced # <LEAF>
v <- [vV] !v !unvoiced # <LEAF>
j <- [jJ] !j !z !unvoiced # <LEAF>
z <- [zZ] !z !j !unvoiced # <LEAF>
s <- [sS] !s !c !voiced # <LEAF>
c <- [cC] !c !s !x !voiced # <LEAF>
x <- [xX] !x !c !k !voiced # <LEAF>
k <- [kK] !k !x !voiced # <LEAF>
f <- [fF] !f !voiced # <LEAF>
p <- [pP] !p !voiced # <LEAF>
t <- [tT] !t !voiced # <LEAF>

# - Spaces / Pause

post_word <- (dot &vowel_y / &consonant / spaces)
initial_dot <- (dot &vowel_y / !dot &consonant)
spaces <- initial_spaces (dot &vowel)? / dot &vowel / EOF
initial_spaces <- (hesitation / space_char)+
hesitation <- (space_char+ dot? / dot) y+ !(dot dot) (dot? &space_char / &(dot y) / dot / EOF)
space_char <- [\t\n\r?!\u0020]

# - Special characters
dot <- '.'
EOF <- !.