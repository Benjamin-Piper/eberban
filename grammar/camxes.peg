# eberban PEG grammar - v0.7
# ==========================

# GRAMMAR
# main rule, allow language version/dialect annotation
text <- parser_version? text_1
parser_version <- DI_clause (!parser_version_number borrowing_content (dot !dot !y)? parser_version_number? / parser_version_number)
parser_version_number <- spaces? TA+
# main text rule
text_1 <- (free_indicator / free_predicate / free_parenthetical)* (paragraph+ / sentence*) spaces? EOF?

# paragraphs
paragraph <- DA_clause+ sentence*
# a sentence is either a proposition or a fragment
sentence <- proposition / fragments
# fragments : allow to answer questions without making a complete proposition
fragments <- DE_clause (proposition_place / FA_clause)* DEI_clause_elidible

# proposition afterthough connectives
proposition <- proposition_jak_post / proposition_1
proposition_jak_post <- proposition_1 (jak !DO_clause DE_clause_elidible proposition_1)+
# pre-tail terms
proposition_1 <- proposition_jak_pre / DE_clause_elidible proposition_1_terms DO_clause_elidible proposition_tail DEI_clause_elidible
proposition_1_terms <- proposition_place*
# forethough connected propositions
proposition_jak_pre <- (gajak !DO_clause DE_clause_elidible proposition (gik proposition)+ GAI_clause_elidible)

# main proposition tail rule
proposition_tail <- proposition_tail_jak_post / proposition_tail_1
# proposition-tail afterthough connectives
proposition_tail_jak_post <- proposition_tail_1 (jak !DE_clause DO_clause_elidible proposition_tail_1 proposition_tail_jak_post_terms)+
proposition_tail_jak_post_terms <- proposition_tail_terms
# proposition-tail negation
proposition_tail_1 <- KA_clause* proposition_tail_2
# simple proposition-tail / forethough connected tails
proposition_tail_2 <- predicate proposition_tail_terms / proposition_tail_jak_pre
# forethough connected tails structure
proposition_tail_jak_pre <- (gajak !DE_clause DO_clause_elidible proposition_tail (gik DO_clause_elidible proposition_tail)+ GAI_clause_elidible) proposition_tail_jak_pre_terms
proposition_tail_jak_pre_terms <- proposition_tail_terms

# terms followed by proposition-tail elidible terminator
proposition_tail_terms <- proposition_place* DOI_clause_elidible
# place + term
proposition_place <- proposition_place_tag proposition_term

# proposition term connectives
proposition_term <- proposition_term_jak_post / proposition_term_1
proposition_term_jak_post <- proposition_term_1 (jak !DE_clause !DO_clause proposition_term_1)+
proposition_term_1 <- proposition_term_jaik_post / proposition_term_2
proposition_term_jaik_post <- proposition_term_2 (jaik !DE_clause !DO_clause proposition_term_2)+
# simple predicate term / forethough connected terms
proposition_term_2 <- proposition_term_jak_pre / scoped_proposition_term / predicate
# forethough connected term structure
proposition_term_jak_pre <- (gajak !DA_clause !DO_clause proposition_term (gik !DO_clause proposition_term)+ GAI_clause_elidible)
# scoped proposition term
scoped_proposition_term <- GO_clause proposition_term GOI_clause_elidible

# proposition place tags connectives
proposition_place_tag <- proposition_place_tag_jak_post / proposition_place_tag_1
proposition_place_tag_jak_post <- proposition_place_tag_1 (JA_clause proposition_place_tag_1)+

# basic proposition place tags
proposition_place_tag_1 <- proposition_place_modal / FA_clause
# proposition place modal
proposition_place_modal <- DU_clause predicate_2

# predicate chains, followed by links
predicate <- predicate_1+ predicate_link*
predicate_link <- VA_clause predicate VAI_clause_elidible
# predicate afterthough connectives
predicate_1 <- predicate_cak_post / predicate_2
predicate_cak_post <- predicate_2 (cak !DE_clause !DA_clause predicate_2)+
# core predicates
predicate_2 <- predicate_cak_pre / lexeme free_post* / borrowing / grammatical_quote / one_word_quote / ungrammatical_quote / foreign_quote / abstraction / predicate_place_swap / scoped_predicate / MA_clause / free_prefix* spaces? (root / string) free_post*
# forethough connected predicates
predicate_cak_pre <- (gacak !DE_clause !DA_clause predicate (gik predicate)+ GAI_clause_elidible)

# flat lexeme prefixes
lexeme <- (lexeme_1 / lexeme_2 / lexeme_3 / lexeme_4  / lexeme_n) 
lexeme_1 <- A_clause lexeme_word
lexeme_2 <- E_clause lexeme_word lexeme_word
lexeme_3 <- I_clause lexeme_word lexeme_word lexeme_word
lexeme_4 <- O_clause lexeme_word lexeme_word lexeme_word lexeme_word
lexeme_n <- U_clause (!(dot? U) lexeme_word)+ (dot? U)
lexeme_word <- initial_dot native_word

# borrowings
# borrowing <- ZA_clause borrowing_content dot? free_post*

borrowing <- ZA_clause borrowing_content (dot !dot !y)? free_post*
borrowing_content <- spaces foreign_word (!spaces native_word)*

# quotes
grammatical_quote <- ZE_clause text_1 ZEI_clause
one_word_quote <- ZI_clause spaces? native_word
ungrammatical_quote <- ZO_clause (!ZOI_clause spaces? native_word) ZOI_clause
foreign_quote <- ZU_clause (spaces?) foreign_quote_open spaces foreign_quote_content foreign_quote_close free_post*
foreign_quote_content <- (foreign_quote_word spaces)*

# abstractions
abstraction <- BA_clause proposition BAI_clause_elidible

# predicate place swap
predicate_place_swap <- SA_clause predicate_2

# scoped predicate
scoped_predicate <- GO_clause predicate GOI_clause_elidible

# string (numbers / literals)
string <- (number_string / letter_string) TAI_clause_elidible
number_string <- TA_clause (TA_clause / BY_clause)*
letter_string <- BY_clause (TA_clause / BY_clause)*

# afterthough connectives
jak <- KA_clause? SA_clause? JA_clause KAI_clause? free_post*
jaik <- JAI_clause
cak <- KA_clause? SA_clause? CA_clause KAI_clause?  free_post*

# forethough connectives
gajak <- GA_clause SA_clause? JA_clause KAI_clause? free_post*
gacak <- GA_clause SA_clause? CA_clause KAI_clause? free_post*
gik <- GI_clause KAI_clause? free_post*

# free prefix
free_prefix <- PA_clause

# free suffix
free_post <- PAI_clause / free_indicator / free_predicate / free_parenthetical / free_subscript
free_indicator <- XA_clause KAI_clause?
free_predicate <- PE_clause predicate_2
free_parenthetical <- PO_clause text_1 POI_clause
free_subscript <- PU_clause string

# PARTICLES CLAUSES
A_clause            <- free_prefix* spaces? A
BA_clause           <- free_prefix* spaces? BA 
BAI_clause          <- free_prefix* spaces? BAI free_post*
BAI_clause_elidible <- BAI_clause?
BY_clause           <- free_prefix* spaces? BY
CA_clause           <- free_prefix* spaces? CA free_post*
DA_clause           <- free_prefix* spaces? DA free_post*
DI_clause           <- spaces? DI
DE_clause           <- free_prefix* spaces? DE free_post*
DE_clause_elidible  <- DE_clause?
DEI_clause          <- free_prefix* spaces? DEI free_post*
DEI_clause_elidible <- DEI_clause?
DO_clause           <- free_prefix* spaces? DO free_post*
DO_clause_elidible  <- DO_clause? 
DOI_clause          <- free_prefix* spaces? DOI free_post*
DOI_clause_elidible <- DOI_clause?
DU_clause           <- free_prefix* spaces? DU
E_clause            <- free_prefix* spaces? E
FA_clause           <- free_prefix* spaces? FA free_post*
GA_clause           <- free_prefix* spaces? GA
GAI_clause          <- free_prefix* spaces? GAI free_post*
GAI_clause_elidible <- GAI_clause?
GE_clause           <- free_prefix* spaces? GE
GEI_clause          <- free_prefix* spaces? GEI free_post*
GI_clause           <- free_prefix* spaces? GI
GO_clause           <- free_prefix* spaces? GO
GOI_clause          <- free_prefix* spaces? GOI free_post*
GOI_clause_elidible <- GOI_clause?
I_clause            <- free_prefix* spaces? I
JA_clause           <- free_prefix* spaces? JA free_post*
JAI_clause          <- free_prefix* spaces? JAI free_post*
KA_clause           <- free_prefix* spaces? KA free_post*
KAI_clause          <- free_prefix* spaces? KAI
MA_clause           <- free_prefix* spaces? MA free_post*
O_clause            <- free_prefix* spaces? O
PA_clause           <- spaces? PA free_post*
PAI_clause          <- spaces? PAI
PE_clause           <- free_prefix* spaces? PE
PO_clause           <- free_prefix* spaces? PO
POI_clause          <- free_prefix* spaces? POI
PU_clause           <- free_prefix* spaces? PU
SA_clause           <- free_prefix* spaces? SA
TA_clause           <- free_prefix* spaces? TA
TAI_clause          <- free_prefix* spaces? TAI
TAI_clause_elidible <- TAI_clause?
U_clause            <- free_prefix* spaces? U
VA_clause           <- free_prefix* spaces? VA
VAI_clause          <- free_prefix* spaces? VAI
VAI_clause_elidible <- VAI_clause?
XA_clause           <- free_prefix* spaces? XA
ZA_clause           <- free_prefix* spaces? ZA
ZE_clause           <- free_prefix* spaces? ZE
ZEI_clause          <- free_prefix* spaces? ZEI free_post*
ZI_clause           <- free_prefix* spaces? ZI
ZO_clause           <- free_prefix* spaces? ZO
ZOI_clause          <- free_prefix* spaces? ZOI free_post*
ZU_clause           <- free_prefix* spaces? ZU

# PARTICLE FAMILIES
A     <- &particle (a)
BA    <- &particle !(BAI post_word) (b vowel_tail)
BAI   <- &particle (b a i)
BY    <- &particle (consonant y / vowel_y h y / (i / u) y h y / vi_diphthong h y / y h vowel)
CA    <- &particle (c vowel_tail)
DA    <- &particle (d a)
DE    <- &particle (d e)
DEI   <- &particle (d e i)
DI    <- &particle (d i)
DO    <- &particle (d o)
DOI   <- &particle (d o i)
DU    <- &particle (d u)
E     <- &particle (e)
FA    <- &particle (f vowel_tail)
GA    <- &particle (g a)
GAI   <- &particle (g a i)
GE    <- &particle (g e)
GEI   <- &particle (g e i)
GI    <- &particle (g i)
GO    <- &particle (g o)
GOI   <- &particle (g o i)
I     <- &particle (i)
JA    <- &particle (j vowel)
JAI   <- &particle !(JA post_word) (j vowel_tail)
KA    <- &particle (k a)
KAI   <- &particle (k a i)
MA    <- &particle (m vowel_tail)
O     <- &particle (o)
PA    <- &particle (p a vowel_tail_1?)
PAI   <- &particle (p a i)
PE    <- &particle (p e i?)
PO    <- &particle (p o)
POI   <- &particle (p o i)
PU    <- &particle (p u)
SA    <- &particle (s vowel_tail)
TA    <- &particle !(TAI post_word) (t vowel_tail)
TAI   <- &particle (t a i)
U     <- &particle (u)
VA    <- &particle !(VAI post_word) (v vowel_tail)
VAI   <- &particle (v a i)
XA    <- &particle (x vowel_tail)
ZA    <- &particle (z a i?)
ZE    <- &particle (z e)
ZEI   <- &particle (z e i)
ZI    <- &particle (z i)
ZO    <- &particle (z o)
ZOI   <- &particle (z o i)
ZU    <- &particle (z u)

# MORPHOLOGY
# - Forein text quoting
foreign_quote_open <- native_word
foreign_quote_word <- (!spaces .)+ 
foreign_quote_close <- native_word

# - Legal words
foreign_word <- !coda (initial_consonant_pair / consonant)? vowel_tail_y (consonant_cluster vowel_tail_y)* (consonant consonant?)?
native_word <-  root / particle
particle <- !coda consonant? vowel_tail_y !coda &post_word
root <- ((initial_consonant_pair vowel_tail_y coda?) / (!coda (initial_consonant_pair / consonant) vowel_tail_y coda)) &post_word

# - Legal vowels and vowel tails
vowel_tail <- (diphthong / vowel) vowel_tail_1* 
vowel_tail_1 <- h (vi_diphthong / vowel )

vowel_tail_y <- (diphthong_y / vowel_y) vowel_tail_y_1* 
vowel_tail_y_1 <- h (vi_diphthong_y / vowel_y )

diphthong_y <- iuv_diphthong_y / vi_diphthong_y
iuv_diphthong_y <- (i / u) vowel_y
vi_diphthong_y <- (a / e / o / y) i 
vowel_y <- vowel / y 

diphthong <- iuv_diphthong / vi_diphthong
iuv_diphthong <- (i / u) vowel
vi_diphthong <- (a / e / o) i 
vowel <- a / e / i / o / u 

h <- ['h] # <LEAF2>
a <- [aA] # <LEAF>
e <- [eE] # <LEAF>
i <- [iI] # <LEAF>
o <- [oO] # <LEAF>
u <- [uU] # <LEAF>
y <- [yY] # <LEAF>

# - Legal consonant and consonant pairs
consonant_cluster <- (!(coda coda coda) consonant consonant*)
initial_consonant_pair <- (&initial consonant consonant !consonant)
initial <- (affricate / sibilant? other? liquid?) !consonant
 
consonant <- (voiced / unvoiced / liquid / m / n) 
affricate <- (t c / t s / d j / d z) 
liquid <- (l / r) 
other <- (p / t !l / k / f / x / b / d !l / g / v / m / n !liquid) 
sibilant <- (c / s !x / (j / z) !n !liquid) 
coda <- (l / n / r)
voiced <- (b / d / g / j / v / z) 
unvoiced <- (c / f / k / p / s / t / x) 

l <- [lL] !l # <LEAF>
m <- [mM] !m # <LEAF>
n <- [nN] !n # <LEAF>
r <- [rR] !r # <LEAF>
b <- [bB] !b !unvoiced # <LEAF>
d <- [dD] !d !unvoiced # <LEAF>
g <- [gG] !g !unvoiced # <LEAF>
v <- [vV] !v !unvoiced # <LEAF>
j <- [jJ] !j !z !unvoiced # <LEAF>
z <- [zZ] !z !j !unvoiced # <LEAF>
s <- [sS] !s !c !voiced # <LEAF>
c <- [cC] !c !s !x !voiced # <LEAF>
x <- [xX] !x !c !k !voiced # <LEAF>
k <- [kK] !k !x !voiced # <LEAF>
f <- [fF] !f !voiced # <LEAF>
p <- [pP] !p !voiced # <LEAF>
t <- [tT] !t !voiced # <LEAF>

# - Spaces / Pause

post_word <- (dot &vowel_y / &consonant / spaces)
initial_dot <- (dot &vowel_y / !dot &consonant)
spaces <- initial_spaces (dot &vowel_y)? / dot &vowel_y / EOF
initial_spaces <- (hesitation / space_char)+
hesitation <- (space_char+ dot? / dot) !(y h y) y+ !(dot dot) (dot? &space_char / &(dot y) / dot / EOF)
space_char <- [\t\n\r?!\u0020]

# - Special characters
dot <- '.'
EOF <- !.