# eberban PEG grammar - v0.56.1
# =============================

# GRAMMAR
# main text rule
text <- language_flags (free_suffix)* paragraphs? spaces? EOF?
language_flags <- DO_clause*

# text structure
paragraphs <- paragraph (&DU_clause paragraph)*
paragraph <- DU_clause? paragraph_unit (&paragraph_unit_starter paragraph_unit)*

paragraph_unit_starter <- PA_clause / PO_clause / PU_clause
paragraph_unit <- paragraph_unit_erased / paragraph_unit_1
paragraph_unit_erased <- paragraph_unit_1 CU_clause
paragraph_unit_1 <- definition / axiom / sentence

arguments_list <- (KI_clause / GI_clause / BA_clause)* BE_clause

definition <- PO_clause unit_definable_2 inner_definition
sentence <- PA_clause_elidible inner_definition
axiom <- PU_clause unit_definable_2

# chaining
inner_definition <- arguments_list? chain_or_list

chain_or_list <- list / chain
list <- (list_item BU_clause)+ list_item?
list_item <- chain

chain <- (chain_step_negation / chain_step)+
chain_step_negation <- BI_clause chain

chain_step <- chain_unit explicit_bind_group*
explicit_bind_group <- explicit_bind_first explicit_bind_additional* VEI_clause_elidible
explicit_bind_first <- BI_clause? VI_clause inner_definition
explicit_bind_additional <- BI_clause? FI_clause inner_definition

chain_unit <- chain_unit_1 free_suffix*
chain_unit_1 <- (SI_clause !SI_clause / ZI_clause)* chain_unit_2
chain_unit_2 <- BA_clause / MI_clause / unit_quote / unit_scoped / unit_borrowing / unit_number / unit_inline_assignement / unit_definable

unit_definable <- unit_definable_namespaced / unit_definable_2
unit_definable_namespaced <- !BO_clause (unit_definable_2 PI_clause)+ !BO_clause unit_definable_2
unit_inline_assignement <- free_prefix* BO_clause? (KI_clause / unit_definable_2)

unit_definable_2 <- GI_clause / unit_freeform_variable / unit_compound / unit_root

unit_freeform_variable <- free_prefix* spaces? freeform_variable
unit_root <- free_prefix* spaces? root_word
unit_number <- free_prefix* spaces? number
unit_compound <- free_prefix* spaces? compound
unit_borrowing <- free_prefix* borrowing_group
unit_scoped <- PE_clause inner_definition PEI_clause_elidible

# quotes
unit_quote <- grammatical_quote / one_word_quote / foreign_quote / spelling_quote
grammatical_quote <- CA_clause text CAI_clause
one_word_quote <- CI_clause spaces? (native_word / compound / borrowing)

foreign_quote <- COI_clause / foreign_quote_1
foreign_quote_1 <- CO_clause spaces? foreign_quote_open pause_char foreign_quote_content single_pause_char foreign_quote_close

foreign_quote_content <- (!(single_pause_char foreign_quote_close) .)*
foreign_quote_open <- native_form # doesn't perform &post_word check
foreign_quote_word <- (!single_pause_char .)+
foreign_quote_close <- native_word # performs &post_word check

spelling_quote <- CE_clause spelling_quote_unit+ CEI_clause
spelling_quote_unit <- spaces? spelling_quote_unit_2
spelling_quote_unit_2 <- !CEI (initial_pair / consonant)? vhowels

# numbers
number <- number_base? (number_1 number_fractional? / number_1? number_fractional) number_magnitude? JI_clause?
number_1 <- TI_clause+
number_base <- TI_clause JU_clause
number_fractional <- JO_clause number_1? number_repeat? &number_fractional_constraint
# Having a fractional part prevents to use anything but math mode (jie or ellided)
number_fractional_constraint <- number_magnitude? spaces? !(!(j i e &post_word) JI)
number_repeat <- JA_clause number_1
number_magnitude <- JE_clause number_1

# borrowings
borrowing_group <- (spaces? borrowing)+ BE_clause_elidible

# free affixes
free_prefix <- free_metadata
free_metadata <- DI_clause

free_suffix <- free_parenthetical / free_interjection
free_interjection <- DE_clause chain_unit_1 # avoid nested free suffix
free_parenthetical <- DA_clause text DAI_clause

# PARTICLES CLAUSES
BI_clause  <- free_prefix* spaces? BI  free_suffix*     # wide-scope negation
BE_clause  <-              spaces? BE                   # miscellaneous terminator
BA_clause  <- free_prefix* spaces? BA                   # inline argument
BO_clause  <- free_prefix* spaces? BO                   # variable assignement
BU_clause  <- free_prefix* spaces? BU                   # sequence separator
                                                        #
DI_clause  <-              spaces? DI                   # free metadata
DE_clause  <-              spaces? DE                   # free interjection
DA_clause  <-              spaces? DA                   # free parenthetical starter
DAI_clause <-              spaces? DAI                  # free parenthetical terminator
DO_clause <-               spaces? DO                   # language flags
DU_clause  <- free_suffix* spaces? DU free_suffix*      # paragraph marker
                                                        #
SI_clause  <- free_prefix* spaces? SI                   # chain place selection
ZI_clause  <- free_prefix* spaces? ZI                   # chain unit core transformation
VI_clause  <- free_prefix* spaces? VI free_suffix*      # explicit bind + VI-scope
FI_clause  <- free_prefix* spaces? FI free_suffix*      # next explicit bind
VEI_clause <-              spaces? VEI                  # VI-scope terminator
                                                        #
GI_clause  <-              spaces? GI                   # predicate variables
KI_clause  <-              spaces? KI                   # symbol/generic variables
MI_clause  <- free_prefix* spaces? MI                   # particle predicates
                                                        #
PI_clause  <-              spaces? PI                   # namespace separator
PE_clause  <- free_prefix* spaces? PE  free_suffix*     # scoped unit starter
PEI_clause <-              spaces? PEI                  # scope unit elidible terminator
PA_clause  <- free_prefix* spaces? PA  free_suffix*     # sentence starter
PO_clause  <- free_prefix* spaces? PO  free_suffix*     # definition starter
PU_clause  <-              spaces? PU                   # axiom toggle
                                                        #
TI_clause  <-              spaces? TI                   # digits
                                                        #
JI_clause  <-              spaces? JI                   # number terminator
JE_clause  <-              spaces? JE                   # number magnitude separator
JA_clause  <-              spaces? JA                   # number repeating part separator
JO_clause  <-              spaces? JO                   # number decimal separator
JU_clause  <-              spaces? JU                   # number base separator
                                                        #
CI_clause  <- free_prefix* spaces? CI                   # one word quote
CE_clause  <- free_prefix* spaces? CE                   # spelling quote starter
CEI_clause <- free_prefix* spaces? CEI                  # spelling quote terminator
CA_clause  <- free_prefix* spaces? CA                   # grammatical quote starter
CAI_clause <- free_prefix* spaces? CAI                  # grammatical quote terminator
CO_clause  <- free_prefix* spaces? CO                   # foreign quote
COI_clause <- free_prefix* spaces? COI                  # skipped foreign quote
                                                        #
CU_clause  <-              spaces? CU                   # paragraph unit eraser

BE_clause_elidible  <- BE_clause?
PA_clause_elidible  <- PA_clause?
PEI_clause_elidible <- PEI_clause?
VEI_clause_elidible <- VEI_clause?

# PARTICLE FAMILIES
MI    <- &particle_word                   (m vhowels)         &post_word
PI    <- &particle_word                   (p &i vhowels)      &post_word
PE    <- &particle_word                   (p &e vhowels)      &post_word
PEI   <- &particle_word                   (p e i)             &post_word
PA    <- &particle_word                   (p &a vhowels)      &post_word
PO    <- &particle_word                   (p &o vhowels)      &post_word
PU    <- &particle_word                   (p &u vhowels)      &post_word
BI    <- &particle_word                   (b &i vhowels)      &post_word
BE    <- &particle_word                   (b &e vhowels)      &post_word
BA    <- &particle_word                   (b &a vhowels)      &post_word
BO    <- &particle_word                   (b &o vhowels)      &post_word
BU    <- &particle_word                   (b &u vhowels)      &post_word
FI    <- &particle_word                   (f vhowels)         &post_word
VI    <- &particle_word !(VEI &post_word) (v vhowels)         &post_word
VEI   <- &particle_word                   (v e i)             &post_word
TI    <- &particle_word                   (t vhowels / digit) &post_word
DI    <- &particle_word                   (d &i vhowels)      &post_word
DE    <- &particle_word                   (d &e vhowels)      &post_word
DA    <- &particle_word !(DAI &post_word) (d &a vhowels)      &post_word
DAI   <- &particle_word                   (d a i)             &post_word
DO    <- &particle_word                   (d &o vhowels)      &post_word
DU    <- &particle_word                   (d &u vhowels)      &post_word
SI    <- &particle_word                   (s vhowels)         &post_word
ZI    <- &particle_word                   (z vhowels)         &post_word
CI    <- &particle_word                   (c &i vhowels)      &post_word
CE    <- &particle_word !(CEI &post_word) (c &e vhowels)      &post_word
CEI   <- &particle_word                   (c e i)             &post_word
CA    <- &particle_word !(CAI &post_word) (c &a vhowels)      &post_word
CAI   <- &particle_word                   (c a i)             &post_word
CO    <- &particle_word !(COI &post_word) (c &o vhowels)      &post_word
COI   <- &particle_word                   (c o i)             &post_word
CU    <- &particle_word                   (c &u vhowels)      &post_word
JI    <- &particle_word                   (j &i vhowels)      &post_word
JE    <- &particle_word                   (j &e vhowels)      &post_word
JA    <- &particle_word                   (j &a vhowels)      &post_word
JO    <- &particle_word                   (j &o vhowels)      &post_word
JU    <- &particle_word                   (j &u vhowels)      &post_word
KI    <- &particle_word                   (k vhowels)         &post_word
GI    <- &particle_word                   (g vhowels)         &post_word

# - Compounds
compound <- (compound_2 / compound_3 / compound_n)
compound_2 <- e i? compound_word compound_word
compound_3 <- a i? compound_word compound_word compound_word
compound_n <- o i? (!compound_n_end compound_word)+ compound_n_end
compound_n_end <- spaces o spaces
compound_word <- spaces? (borrowing / native_word)

# - Free-form words
freeform_variable <- i (spaces &i / hyphen !i) freeform_content freeform_end
borrowing <- u (spaces &u / hyphen !u) freeform_content freeform_end
freeform_content <- freeform_consonants? vhowels (freeform_consonants vhowels)* consonant?
freeform_consonants <- consonant_triplet / medial_pair / hyphen (initial_pair / consonant)
freeform_end <- (single_pause_char / space_char / EOF)

# - Native words
native_word <- root_word / particle_word
native_form <- root_form / particle_form

particle_word <- particle_form &post_word
particle_form <- !sonorant consonant vhowels !medial_pair

root_word <- root_form &post_word
root_form <- !sonorant (root_form_1 / root_form_2 / root_form_3)
root_form_1 <- consonant vhowels ((medial_or_triplet / hyphen sonorant) vhowels)+ sonorant?
root_form_2 <- consonant vhowels sonorant
root_form_3 <- initial_pair vhowels ((medial_or_triplet / hyphen sonorant) vhowels)* sonorant?

# - Legal clusters
vhowels <- vowels (hyphen h vowels)*
vowels <- vowel (hyphen vowel)*

medial_or_triplet <- !sonorant consonant_triplet / medial_pair

consonant_triplet <- (consonant_triplet_1 / consonant_triplet_2) !consonant
consonant_triplet_1 <- &medial_pair !sonorant consonant hyphen initial_pair
consonant_triplet_2 <- sonorant hyphen initial_pair

medial_pair <- !initial medial_patterns
medial_patterns <- (medial_n / medial_fv / medial_plosive)
medial_n <- liquid hyphen n / n hyphen liquid
medial_fv <- (f / v) hyphen (plosive / m)
medial_plosive <- plosive hyphen (f / v / plosive / m)

# initial pairs cannot contain an hyphen
initial_pair <- &initial consonant consonant !consonant
# we need to support hyphenation to use `!initial` in `medial_pair`
initial <- ((plosive / f / v) hyphen sibilant / sibilant hyphen other / sibilant hyphen sonorant / other hyphen sonorant)

other <- (p / b) !n / (t / d) !n !l / v / f / k / g / m / n !liquid
plosive <- t / d / k / g / p / b
sibilant <- c / s / j / z
sonorant <- n / r / l

consonant <- (voiced / unvoiced / liquid / nasal)
nasal <- m / n
liquid <- l / r
voiced <- b / d / g / v / z / j
unvoiced <- p / t / k / f / s / c

vowel <- i / e / a / o / u

# Legal letters
i <- [iI]+ # <LEAF>
e <- [eE]+ # <LEAF>
a <- [aA]+ # <LEAF>
o <- [oO]+ # <LEAF>
u <- [uU]+ # <LEAF>

h <- [hH]+ # <LEAF>
n <- [nN]+ # <LEAF>
r <- [rR]+ # <LEAF>
l <- [lL]+ # <LEAF>

m <- [mM]+ # <LEAF>
p <- [pP]+ !voiced # <LEAF>
b <- [bB]+ !unvoiced # <LEAF>
f <- [fF]+ !voiced # <LEAF>
v <- [vV]+ !unvoiced # <LEAF>
t <- [tT]+ !voiced # <LEAF>
d <- [dD]+ !unvoiced # <LEAF>
s <- [sS]+ !c !voiced # <LEAF>
z <- [zZ]+ !j !unvoiced # <LEAF>
c <- [cC]+ !s !voiced # <LEAF>
j <- [jJ]+ !z !unvoiced # <LEAF>
g <- [gG]+ !unvoiced # <LEAF>
k <- [kK]+ !voiced # <LEAF>

# - Spaces / Pause
post_word <- (single_pause_char &vowel) / !sonorant &consonant / spaces
spaces <- space_char+ hesitation? (single_pause_char &vowel)? / single_pause_char &vowel / EOF
hesitation <- (n (space_char+ / EOF))+

# - Special characters
hyphen <- (hyphen_char [\n\r]*)? # hyphens + line break support
hyphen_char <- [\u2010\u2014\u002D]
single_pause_char <- pause_char !pause_char
pause_char <- (['’`])
space_char <- !(single_pause_char / digit / hyphen_char / [a-zA-Z]) .
digit <- [0-9] # <LEAF2>
EOF <- !.