# eberban PEG grammar - v0.35
# ===========================

# GRAMMAR
# main rule, allow language version/dialect annotation
text <- parser_version? text_1
parser_version <- BU_clause (parser_version_short / parser_version_long)
parser_version_long <- spaces? borrowing parser_version_number?
parser_version_short <- parser_version_number
parser_version_number <- spaces? TA+

# main text rule
text_1 <- free_parenthetical* paragraphs? spaces? EOF?

# text structure
paragraphs <- paragraph (&PU_clause paragraph)*
paragraph <- PU_clause? paragraph_unit (&(PA_clause / PO_clause) paragraph_unit)*
paragraph_unit <- definition / sentence

arguments_list <- (KA_clause / GA_clause)* PI_clause

definition <- PO_clause definition_key scope POI_clause_elidible
definition_key <- GA_clause / unit_compound / unit_root
sentence <- PA_clause_elidible scope PAI_clause_elidible

# scope
scope <- arguments_list? scope_1

scope_1 <- scope_group / scope_2
scope_group <- scope_2 (BA_clause scope_2)+

scope_2 <- sequential

# bindings
sequential <- sequential_neg / sequential_unit sequential?
sequential_neg <- BI_clause sequential_unit+
sequential_unit <- unit explicit_binding?
explicit_binding <- explicit_binding_va explicit_binding_fa* VAI_clause_elidible
explicit_binding_va <- BI_clause? VA_clause scope 
explicit_binding_fa <- BI_clause? FA_clause scope

# predicate unit
unit <- (SA_clause / ZA_clause)* unit_1
unit_1 <- quote / variable / unit_scope / unit_borrowing / unit_root / unit_number / unit_compound

unit_root <- free_prefix* spaces? root free_post*
unit_number <- free_prefix* spaces? number free_post*
unit_compound <- free_prefix* spaces? compound free_post*
unit_borrowing <- free_prefix* (spaces? borrowing)+ BE_clause_elidible free_post*
unit_scope <- PE_clause scope PEI_clause_elidible

# quotes
quote <- grammatical_quote / one_word_quote / foreign_quote
grammatical_quote <- LA_clause text_1 LAI_clause
one_word_quote <- LE_clause spaces? native_word
foreign_quote <- LO_clause spaces? foreign_quote_open spaces foreign_quote_content foreign_quote_close free_post*
foreign_quote_content <- (foreign_quote_word spaces)*

# number
number <- TA_clause+ BE_clause_elidible

# variables
variable <- MA_clause / BO_clause? KA_clause / BO_clause? GA_clause

# free affixes
free_prefix <- DA_clause

free_post <- free_parenthetical / free_subscript
free_subscript <- DI_clause number
free_parenthetical <- DO_clause text_1 DOI_clause

override <- DU_clause (GA_clause / override_word)
override_word <- spaces? (root / compound / &particle (m a))


# PARTICLES CLAUSES
BE_clause           <- free_prefix* spaces? BE free_post*                      # miscellaneous terminator
BI_clause           <- free_prefix* spaces? BI free_post*                      # wide-scope negation
BO_clause           <- free_prefix* spaces? BO free_post*                      # variable assignement
BU_clause           <- spaces? BU                                              # parser version/dialect
DA_clause           <- spaces? DA                                              # free prefix
DI_clause           <- free_prefix* spaces? DI free_post*                      # free subscript
DO_clause           <- free_prefix* spaces? DO                                 # free parenthetical starter
DOI_clause          <- free_prefix* spaces? DOI                                # free parenthetical terminator
DU_clause           <- free_prefix* spaces? DU free_post*                      # particle override
BA_clause           <- free_prefix* spaces? BA free_post* override?            # scope grouping (plural with, sets, lists)
FA_clause           <- free_prefix* spaces? FA free_post* override?            # continue explicit binding
GA_clause           <- free_prefix* spaces? GA free_post*                      # pred variables
KA_clause           <- free_prefix* spaces? KA free_post*                      # individual variables
MA_clause           <- free_prefix* spaces? MA free_post*                      # intrinsic variables (pronouns, ...)
PA_clause           <- free_prefix* spaces? PA free_post*                      # pred scope starter
PAI_clause          <- free_prefix* spaces? PAI free_post*                     # pred scope terminator
PE_clause           <- free_prefix* spaces? PE free_post*                      # unit scope starter
PEI_clause          <- free_prefix* spaces? PEI free_post*                     # unit scope elidible terminator
PI_clause           <- free_prefix* spaces? PI free_post*                      # pred scope arguments terminator
PO_clause           <- free_prefix* spaces? PO free_post*                      # definition starter
POI_clause          <- free_prefix* spaces? POI free_post*                     # definition terminator
PU_clause           <- free_prefix* spaces? PU free_post*                      # paragraph marker
SA_clause           <- free_prefix* spaces? SA free_post* override?            # place binding tag
TA_clause           <- free_prefix* spaces? TA free_post*                      # numbers/digits
VA_clause           <- free_prefix* spaces? VA free_post* override?            # starts explicit binding clause
VAI_clause          <- free_prefix* spaces? VAI free_post*                     # explicit binding clause terminator
LA_clause           <- free_prefix* spaces? LA                                 # grammatical quote starter
LAI_clause          <- spaces? LAI free_post*                                  # grammatical quote terminator
LE_clause           <- free_prefix* spaces? LE free_post*                      # one word quote
LO_clause           <- free_prefix* spaces? LO                                 # foreign quote
ZA_clause           <- free_prefix* spaces? ZA free_post* override?            # pred unit transformation

BE_clause_elidible  <- BE_clause?
PA_clause_elidible  <- PA_clause?
PAI_clause_elidible <- PAI_clause?
PEI_clause_elidible <- PEI_clause?
POI_clause_elidible <- POI_clause?
VAI_clause_elidible <- VAI_clause?

# PARTICLE FAMILIES
BA    <- &particle (b &a haeiou)
BE    <- &particle (b &e haeiou)
BI    <- &particle (b i)
BO    <- &particle (b o)
BU    <- &particle (b u)
CA    <- &particle (c haeiou)
DA    <- &particle (d &a haeiou)
DI    <- &particle (d i)
DO    <- &particle (d o)
DOI   <- &particle (d o i)
DU    <- &particle (d u)
FA    <- &particle (f haeiou)
GA    <- &particle (g haeiou)
KA    <- &particle (k haeiou)
MA    <- &particle (m haeiou)
PA    <- &particle !(PAI &post_word) (p &a haeiou)
PAI   <- &particle (p a i)
PE    <- &particle (p e)
PEI   <- &particle (p e i)
PI    <- &particle (p &i haeiou)
PO    <- &particle !(POI &post_word) (p &o haeiou)
POI   <- &particle (p o i)
PU    <- &particle (p &u haeiou)
SA    <- &particle (s haeiou)
TA    <- &particle (t haeiou) / digit
VA    <- &particle !(VAI &post_word) (v haeiou)
VAI   <- &particle (v a i)
LA    <- &particle !(LAI &post_word) (l &a haeiou)
LAI   <- &particle (l a i)
LE    <- &particle (l &e haeiou)
LO    <- &particle (l &o haeiou)
ZA    <- &particle (z haeiou)

# MORPHOLOGY
# - Forein text quoting
foreign_quote_open <- native_word
foreign_quote_word <- (!spaces .)+ 
foreign_quote_close <- native_word

# - Compounds
compound <- (compound_2 / compound_3 / compound_4 / compound_n) &post_word
compound_2 <- e compound_word compound_word
compound_3 <- i compound_word compound_word compound_word
compound_4 <- o compound_word compound_word compound_word compound_word
compound_n <- a compound_word (!compound_n_end compound_word)* compound_n_end
compound_n_end <- spaces? a &post_word
compound_word <- spaces? (borrowing / native_word)

# - Foreign words
borrowing <-  u (spaces &u / !u) borrowing_content borrowing_end
borrowing_content <- foreign_word
borrowing_end <- (pause_char / space_char / EOF)
foreign_word <- (initial_consonant_pair / consonant / h)? haeiou (consonant_cluster haeiou)* sonorant?

# - Native words
native_word <- root / particle
particle <- !sonorant particle_1  &post_word
root <- !sonorant (root_1 / root_2 / root_3) &post_word

particle_1 <- consonant haeiou

root_1 <- consonant haeiou (sonorant haeiou)+ sonorant?
root_2 <- consonant haeiou sonorant
root_3 <- initial_consonant_pair haeiou (sonorant haeiou)* sonorant?

# - Legal clusters
haeiou <- aeiou+ (h aeiou+)*
aeiou <- a / e / i / o / u

consonant_cluster <- (!(sonorant sonorant sonorant) consonant consonant? consonant? !consonant)
initial_consonant_pair <- &initial consonant consonant !consonant
initial <- (plosib / sibilant? other? liquid?) !consonant

plosib <- plosive sibilant
consonant <- (voiced / unvoiced / liquid / m / n) 
liquid <- (l / r) 
other <- (p / t / k / f / b / d / g / v / m / n !liquid)
plosive <- (t / d / k / g / p / b)
sibilant <- (c / s / j / z) 
# sonorant <- (l / n / r) # technically "alveolar sonorant" as "m" is not included
sonorant <- (n / r)
voiced <- (b / d / g / j / v / z) 
unvoiced <- (c / f / k / p / s / t) 

# Legal letters
a <- [aA] !a # <LEAF>
e <- [eE] !e # <LEAF>
i <- [iI] !i # <LEAF>
o <- [oO] !o # <LEAF>
u <- [uU] !u # <LEAF>

h <- [hH] !h # <LEAF>
n <- [nN] !n # <LEAF>
r <- [rR] !r # <LEAF>

b <- [bB] !b !unvoiced # <LEAF>
d <- [dD] !d !unvoiced # <LEAF>
g <- [gG] !g !unvoiced # <LEAF>
v <- [vV] !v !unvoiced # <LEAF>
j <- [jJ] !j !z !unvoiced # <LEAF>
z <- [zZ] !z !j !unvoiced # <LEAF>
s <- [sS] !s !c !voiced # <LEAF>
c <- [cC] !c !s !voiced # <LEAF>
k <- [kK] !k !voiced # <LEAF>
f <- [fF] !f !voiced # <LEAF>
p <- [pP] !p !voiced # <LEAF>
t <- [tT] !t !voiced # <LEAF>
m <- [mM] !m # <LEAF>
l <- [lL] !l # <LEAF>

# - Spaces / Pause
post_word <- (pause_char &aeiou) / !sonorant &consonant / spaces
spaces <- space_char+ (pause_char &aeiou)? / pause_char &aeiou / EOF


# - Special characters
pause_char <- (['.]) !pause_char
space_char <- [\t\n\r?!\u0020]
digit <- [.0123456789] # <LEAF2>
EOF <- !.