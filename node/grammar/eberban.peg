# eberban PEG grammar - v0.37.3
# ===========================

# GRAMMAR
# main text rule
text <- free_parenthetical* paragraphs? spaces? EOF?

# text structure
paragraphs <- paragraph (&PU_clause paragraph)*
paragraph <- PU_clause? paragraph_unit (&(PA_clause / PO_clause) paragraph_unit)*
paragraph_unit <- definition / sentence

arguments_list <- (KA_clause / GA_clause)* PI_clause

definition <- PO_clause definition_key scope POI_clause_elidible
definition_key <- GA_clause / predicate_compound / predicate_root
sentence <- PA_clause_elidible scope PAI_clause_elidible

# scope
scope <- arguments_list? scope_1

scope_1 <- scope_list / scope_2
scope_list <- scope_list_element (BU_clause scope_list_element)+
scope_list_element <- scope_2

scope_2 <- chaining

# chaining and explicit switches
chaining <- chaining_neg / chaining_unit chaining?
chaining_neg <- BI_clause chaining_unit+
chaining_unit <- predicate va_scope?
va_scope <- va_scope_first va_scope_next* VAI_clause_elidible
va_scope_first <- BI_clause? VA_clause scope 
va_scope_next <- BI_clause? FA_clause scope

# predicate unit
predicate <- (SA_clause / ZA_clause)* predicate_1
predicate_1 <- predicate_simple / predicate_quote / predicate_variable / predicate_scope / predicate_borrowing / predicate_root / predicate_number / predicate_compound

predicate_root <- free_prefix* spaces? root free_post*
predicate_number <- free_prefix* spaces? number free_post*
predicate_compound <- free_prefix* spaces? compound free_post*
predicate_borrowing <- free_prefix* borrowing_group free_post*
predicate_scope <- PE_clause scope PEI_clause_elidible

# quotes
predicate_quote <- grammatical_quote / one_word_quote / foreign_quote
grammatical_quote <- LA_clause text LAI_clause
one_word_quote <- LE_clause spaces? (native_word / compound / borrowing)
foreign_quote <- LO_clause spaces? foreign_quote_open spaces foreign_quote_content foreign_quote_close free_post*
foreign_quote_content <- (foreign_quote_word spaces)*

# numbers
number <- TA_clause+ BE_clause_elidible

# borrowings
borrowing_group <- (spaces? borrowing)+ BE_clause_elidible

# simple
predicate_simple <- BA_clause / MA_clause

# variables
predicate_variable <- BO_clause? (KA_clause / GA_clause)

# free affixes
free_prefix <- DA_clause

free_post <- free_parenthetical / free_subscript
free_subscript <- DI_clause number
free_parenthetical <- DO_clause text DOI_clause

override <- DU_clause (GA_clause / BA_clause / override_word)
override_word <- spaces? (root / compound)


# PARTICLES CLAUSES
BA_clause           <- free_prefix* spaces? BA  free_post*                     # inline argument
BE_clause           <- free_prefix* spaces? BE  free_post*                     # miscellaneous terminator
BI_clause           <- free_prefix* spaces? BI  free_post*                     # wide-scope negation
BO_clause           <- free_prefix* spaces? BO  free_post*                     # variable assignement
BU_clause           <- free_prefix* spaces? BU  free_post*                     # list separator

DA_clause           <-              spaces? DA                                 # free prefix
DI_clause           <- free_prefix* spaces? DI  free_post*                     # free subscript
DO_clause           <- free_prefix* spaces? DO                                 # free parenthetical starter
DOI_clause          <- free_prefix* spaces? DOI                                # free parenthetical terminator
DU_clause           <- free_prefix* spaces? DU  free_post*                     # free particle override

SA_clause           <- free_prefix* spaces? SA  free_post* override?           # place binding tag
ZA_clause           <- free_prefix* spaces? ZA  free_post* override?           # predicate transformation
VA_clause           <- free_prefix* spaces? VA  free_post* override?           # explicit switch + VA-scope
FA_clause           <- free_prefix* spaces? FA  free_post* override?           # next explicit switch
VAI_clause          <- free_prefix* spaces? VAI free_post*                     # VA-scope terminator

GA_clause           <- free_prefix* spaces? GA  free_post*                     # predicate variables
KA_clause           <- free_prefix* spaces? KA  free_post*                     # individual variables
MA_clause           <- free_prefix* spaces? MA  free_post*                     # discourse predicates

PA_clause           <- free_prefix* spaces? PA  free_post*                     # sentence starter
PAI_clause          <- free_prefix* spaces? PAI free_post*                     # sentence terminator
PE_clause           <- free_prefix* spaces? PE  free_post*                     # predicate scope starter
PEI_clause          <- free_prefix* spaces? PEI free_post*                     # predicate scope elidible terminator
PI_clause           <- free_prefix* spaces? PI  free_post*                     # arguments list terminator
PO_clause           <- free_prefix* spaces? PO  free_post*                     # definition starter
POI_clause          <- free_prefix* spaces? POI free_post*                     # definition terminator
PU_clause           <- free_prefix* spaces? PU  free_post*                     # paragraph marker

TA_clause           <- free_prefix* spaces? TA  free_post*                     # numbers/digits

LA_clause           <- free_prefix* spaces? LA                                 # grammatical quote starter
LAI_clause          <-              spaces? LAI free_post*                     # grammatical quote terminator
LE_clause           <- free_prefix* spaces? LE  free_post*                     # one word quote
LO_clause           <- free_prefix* spaces? LO                                 # foreign quote

BE_clause_elidible  <- BE_clause?
PA_clause_elidible  <- PA_clause?
PAI_clause_elidible <- PAI_clause?
PEI_clause_elidible <- PEI_clause?
POI_clause_elidible <- POI_clause?
VAI_clause_elidible <- VAI_clause?

# PARTICLE FAMILIES
BA    <- &particle                   (b a)              &post_word
BE    <- &particle                   (b &e haeiou)      &post_word
BI    <- &particle                   (b i)              &post_word
BO    <- &particle                   (b o)              &post_word
BU    <- &particle                   (b u)              &post_word
CA    <- &particle                   (c haeiou)         &post_word
DA    <- &particle                   (d &a haeiou)      &post_word
DI    <- &particle                   (d i)              &post_word
DO    <- &particle                   (d o)              &post_word
DOI   <- &particle                   (d o i)            &post_word
DU    <- &particle                   (d u)              &post_word
FA    <- &particle                   (f haeiou)         &post_word
GA    <- &particle                   (g haeiou)         &post_word
KA    <- &particle                   (k haeiou)         &post_word
MA    <- &particle                   (m haeiou)         &post_word
PA    <- &particle !(PAI &post_word) (p &a haeiou)      &post_word
PAI   <- &particle                   (p a i)            &post_word
PE    <- &particle                   (p e)              &post_word
PEI   <- &particle                   (p e i)            &post_word
PI    <- &particle                   (p &i haeiou)      &post_word
PO    <- &particle !(POI &post_word) (p &o haeiou)      &post_word
POI   <- &particle                   (p o i)            &post_word
PU    <- &particle                   (p &u haeiou)      &post_word
SA    <- &particle                   (s haeiou)         &post_word
TA    <- &particle                   (t haeiou) / digit &post_word
VA    <- &particle !(VAI &post_word) (v haeiou)         &post_word
VAI   <- &particle                   (v a i)            &post_word
LA    <- &particle !(LAI &post_word) (l &a haeiou)      &post_word
LAI   <- &particle                   (l a i)            &post_word
LE    <- &particle                   (l &e haeiou)      &post_word
LO    <- &particle                   (l &o haeiou)      &post_word
ZA    <- &particle                   (z haeiou)         &post_word

# MORPHOLOGY
# - Forein text quoting
foreign_quote_open <- native_word
foreign_quote_word <- (!space_char .)+ 
foreign_quote_close <- native_word

# - Compounds
compound <- (compound_2 / compound_3 / compound_4 / compound_n) &post_word
compound_2 <- e compound_word compound_word
compound_3 <- i compound_word compound_word compound_word
compound_4 <- o compound_word compound_word compound_word compound_word
compound_n <- a compound_word (!compound_n_end compound_word)* compound_n_end
compound_n_end <- spaces? a &post_word
compound_word <- spaces? (borrowing / native_word)

# - Foreign words
borrowing <-  u (spaces &u / !u) borrowing_content borrowing_end
borrowing_content <- foreign_word
borrowing_end <- (pause_char / space_char / EOF)
foreign_word <- (initial_consonant_pair / consonant / h)? haeiou (consonant_cluster haeiou)* sonorant?

# - Native words
native_word <- root / particle
particle <- !sonorant particle_1 &post_word
root <- !sonorant (root_1 / root_2 / root_3) &post_word

particle_1 <- consonant haeiou

root_1 <- consonant haeiou (sonorant haeiou)+ sonorant?
root_2 <- consonant haeiou sonorant
root_3 <- initial_consonant_pair haeiou (sonorant haeiou)* sonorant?

# - Legal clusters
haeiou <- aeiou+ (h aeiou+)*
aeiou <- a / e / i / o / u

consonant_cluster <- (!(sonorant sonorant sonorant) consonant consonant? consonant? !consonant)
initial_consonant_pair <- &initial consonant consonant !consonant
initial <- (plosib / sibilant? other? liquid?) !consonant

plosib <- plosive sibilant
consonant <- (voiced / unvoiced / liquid / m / n) 
liquid <- (l / r) 
other <- (p / t !l / k / f / b / d !l / g / v / m / n !liquid)
plosive <- (t / d / k / g / p / b)
sibilant <- (c / s / j / z) 
sonorant <- (n / r)
voiced <- (b / d / g / j / v / z) 
unvoiced <- (c / f / k / p / s / t) 

# Legal letters
a <- [aA] !a # <LEAF>
e <- [eE] !e # <LEAF>
i <- [iI] !i # <LEAF>
o <- [oO] !o # <LEAF>
u <- [uU] !u # <LEAF>

h <- [hH] !h # <LEAF>
n <- [nN] !n # <LEAF>
r <- [rR] !r # <LEAF>

b <- [bB] !b !unvoiced # <LEAF>
d <- [dD] !d !unvoiced # <LEAF>
g <- [gG] !g !unvoiced # <LEAF>
v <- [vV] !v !unvoiced # <LEAF>
j <- [jJ] !j !z !unvoiced # <LEAF>
z <- [zZ] !z !j !unvoiced # <LEAF>
s <- [sS] !s !c !voiced # <LEAF>
c <- [cC] !c !s !voiced # <LEAF>
k <- [kK] !k !voiced # <LEAF>
f <- [fF] !f !voiced # <LEAF>
p <- [pP] !p !voiced # <LEAF>
t <- [tT] !t !voiced # <LEAF>
m <- [mM] !m # <LEAF>
l <- [lL] !l # <LEAF>

# - Spaces / Pause
post_word <- (pause_char &aeiou) / !sonorant &consonant / spaces
spaces <- space_char+ (pause_char &aeiou)? / pause_char &aeiou / EOF


# - Special characters
pause_char <- (['.]) !pause_char
space_char <- [\t\n\r?!\u0020]
digit <- [.0123456789] # <LEAF2>
EOF <- !.