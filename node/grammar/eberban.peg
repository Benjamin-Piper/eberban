# eberban PEG grammar - v0.39
# ===========================

# GRAMMAR
# main text rule
text <- (free_interjection / free_parenthetical)* paragraphs? spaces? EOF?

# text structure
paragraphs <- paragraph (&PU_clause paragraph)*
paragraph <- PU_clause? paragraph_unit (&(PA_clause / PO_clause) paragraph_unit)*
paragraph_unit <- definition / sentence

arguments_list <- (KA_clause / GA_clause)* PI_clause

definition <- PO_clause definition_key scope POI_clause_elidible
definition_key <- GA_clause / predicate_compound / predicate_root
sentence <- PA_clause_elidible scope PAI_clause_elidible

# scope
scope <- arguments_list? scope_1

scope_1 <- scope_list / scope_2
scope_list <- scope_list_element (BU_clause scope_list_element)+
scope_list_element <- scope_2

scope_2 <- chaining

# chaining and explicit switches
chaining <- chaining_neg / chaining_unit chaining?
chaining_neg <- BI_clause chaining_unit+
chaining_unit <- predicate va_scope?
va_scope <- va_scope_first va_scope_next* VAI_clause_elidible
va_scope_first <- BI_clause? VA_clause scope 
va_scope_next <- BI_clause? FA_clause scope

# predicate unit
predicate <- predicate_1 free*
predicate_1 <- (SA_clause !SA_clause / ZA_clause)* predicate_2
predicate_2 <- predicate_simple / predicate_quote / predicate_variable / predicate_scope / predicate_borrowing / predicate_root / predicate_number / predicate_compound

predicate_root <- spaces? root
predicate_number <- spaces? number
predicate_compound <- spaces? compound
predicate_borrowing <- borrowing_group
predicate_scope <- PE_clause scope PEI_clause_elidible

# quotes
predicate_quote <- grammatical_quote / one_word_quote / foreign_quote
grammatical_quote <- CA_clause text CAI_clause
one_word_quote <- CE_clause spaces? (native_word / compound / borrowing)
foreign_quote <- CO_clause spaces? foreign_quote_open spaces foreign_quote_content foreign_quote_close
foreign_quote_content <- (foreign_quote_word spaces)*

# numbers
number <- TA_clause+ BE_clause_elidible

# borrowings
borrowing_group <- (spaces? borrowing)+ BE_clause_elidible

# simple
predicate_simple <- BA_clause / MA_clause

# variables
predicate_variable <- BO_clause? (KA_clause / GA_clause)

# free affixes
override <- DU_clause predicate_1 # avoid nested free

free <- free_metadata / free_parenthetical / free_subscript / free_interjection
free_metadata <- DA_clause
free_subscript <- DI_clause number
free_parenthetical <- DO_clause text DOI_clause
free_interjection <- DE_clause predicate_1 # avoid nested free

# PARTICLES CLAUSES
BA_clause  <- spaces? BA                   # inline argument
BE_clause  <- spaces? BE                   # miscellaneous terminator
BI_clause  <- spaces? BI  free*            # wide-scope negation
BO_clause  <- spaces? BO                   # variable assignement
BU_clause  <- spaces? BU                   # list separator
                                           #
DA_clause  <- spaces? DA                   # free metadata
DE_clause  <- spaces? DE                   # free interjection
DI_clause  <- spaces? DI                   # free subscript
DO_clause  <- spaces? DO                   # free parenthetical starter
DOI_clause <- spaces? DOI                  # free parenthetical terminator
DU_clause  <- spaces? DU                   # free particle override
                                           #
SA_clause  <- spaces? SA  override?        # chaining override
ZA_clause  <- spaces? ZA  override?        # predicate transformation
VA_clause  <- spaces? VA  override? free*  # explicit switch + VA-scope
FA_clause  <- spaces? FA  override? free*  # next explicit switch
VAI_clause <- spaces? VAI                  # VA-scope terminator
                                           #
GA_clause  <- spaces? GA                   # predicate variables
KA_clause  <- spaces? KA                   # individual variables
MA_clause  <- spaces? MA                   # discourse predicates
                                           #
PA_clause  <- spaces? PA  free*            # sentence starter
PAI_clause <- spaces? PAI free*            # sentence terminator
PE_clause  <- spaces? PE  free*            # predicate scope starter
PEI_clause <- spaces? PEI                  # predicate scope elidible terminator
PI_clause  <- spaces? PI                   # arguments list terminator
PO_clause  <- spaces? PO  free*            # definition starter
POI_clause <- spaces? POI free*            # definition terminator
PU_clause  <- spaces? PU  free*            # paragraph marker
                                           #
TA_clause  <- spaces? TA                   # numbers/digits
                                           #
CA_clause  <- spaces? CA                   # grammatical quote starter
CAI_clause <- spaces? CAI                  # grammatical quote terminator
CE_clause  <- spaces? CE                   # one word quote
CO_clause  <- spaces? CO                   # foreign quote

BE_clause_elidible  <- BE_clause?
PA_clause_elidible  <- PA_clause?
PAI_clause_elidible <- PAI_clause?
PEI_clause_elidible <- PEI_clause?
POI_clause_elidible <- POI_clause?
VAI_clause_elidible <- VAI_clause?

# PARTICLE FAMILIES
BA    <- &particle                   (b a)              &post_word
BE    <- &particle                   (b &e haeiou)      &post_word
BI    <- &particle                   (b i)              &post_word
BO    <- &particle                   (b o)              &post_word
BU    <- &particle                   (b u)              &post_word
CA    <- &particle !(CAI &post_word) (c &a haeiou)      &post_word
CAI   <- &particle                   (c a i)            &post_word
CE    <- &particle                   (c &e haeiou)      &post_word
CO    <- &particle                   (c &o haeiou)      &post_word
DA    <- &particle                   (d &a haeiou)      &post_word
DE    <- &particle                   (d &e haeiou)      &post_word
DI    <- &particle                   (d i)              &post_word
DO    <- &particle                   (d o)              &post_word
DOI   <- &particle                   (d o i)            &post_word
DU    <- &particle                   (d u)              &post_word
FA    <- &particle                   (f haeiou)         &post_word
GA    <- &particle                   (g haeiou)         &post_word
KA    <- &particle                   (k haeiou)         &post_word
MA    <- &particle                   (m haeiou)         &post_word
PA    <- &particle !(PAI &post_word) (p &a haeiou)      &post_word
PAI   <- &particle                   (p a i)            &post_word
PE    <- &particle                   (p e)              &post_word
PEI   <- &particle                   (p e i)            &post_word
PI    <- &particle                   (p &i haeiou)      &post_word
PO    <- &particle !(POI &post_word) (p &o haeiou)      &post_word
POI   <- &particle                   (p o i)            &post_word
PU    <- &particle                   (p &u haeiou)      &post_word
SA    <- &particle                   (s haeiou)         &post_word
TA    <- &particle                   (t haeiou) / digit &post_word
VA    <- &particle !(VAI &post_word) (v haeiou)         &post_word
VAI   <- &particle                   (v a i)            &post_word
ZA    <- &particle                   (z haeiou)         &post_word


# MORPHOLOGY
# - Forein text quoting
foreign_quote_open <- native_word
foreign_quote_word <- (!space_char .)+ 
foreign_quote_close <- native_word

# - Compounds
compound <- (compound_2 / compound_3 / compound_4 / compound_n) &post_word
compound_2 <- e compound_word compound_word
compound_3 <- i compound_word compound_word compound_word
compound_4 <- o compound_word compound_word compound_word compound_word
compound_n <- a compound_word (!compound_n_end compound_word)* compound_n_end
compound_n_end <- spaces? a &post_word
compound_word <- spaces? (borrowing / native_word)

# - Foreign words
borrowing <-  u (spaces &u / !u) borrowing_content borrowing_end
borrowing_content <- foreign_word
borrowing_end <- (pause_char / space_char / EOF)
foreign_word <- (initial_pair / consonant / h)? haeiou (consonant_cluster haeiou)* sonorant?

# - Native words
native_word <- root / particle
particle <- !sonorant particle_1 &post_word
root <- !sonorant (root_1 / root_2 / root_3) &post_word

particle_1 <- consonant haeiou !middle_pair

root_1 <- consonant haeiou ((middle_pair / sonorant) haeiou)+ sonorant?
root_2 <- consonant haeiou sonorant
root_3 <- initial_pair haeiou ((middle_pair / sonorant) haeiou)* sonorant?

# - Legal clusters
haeiou <- aeiou+ (h aeiou+)*
aeiou <- a / e / i / o / u

consonant_cluster <- !(sonorant sonorant sonorant) consonant consonant? consonant? !consonant

middle_pair <- !initial_pair &middle_patterns consonant consonant !consonant
middle_patterns <- (middle_n / middle_sonorants / middle_plosive / middle_sibilant)
middle_n <- (m / liquid) n
middle_sonorants <- n liquid
middle_plosive <- (f / v)? plosive (f / v / plosive / m)? !consonant
middle_sibilant <- (f / v / sonorant) sibilant

initial_pair <- &initial consonant consonant !consonant
initial <- (plosib / sibilant? other? sonorant?) !consonant

plosib <- plosive sibilant
other <- (p / b / m) !n / (t / d) !n !l / v / f / k / g / n !liquid
plosive <- t / d / k / g / p / b

consonant <- (voiced / unvoiced / liquid / nasal) 
nasal <- m / n
liquid <- l / r
sibilant <- c / s / j / z
sonorant <- n / r / l
voiced <- b / d / g / v / z / j
unvoiced <- p / t / k / f / s / c

# Legal letters
a <- [aA] !a # <LEAF>
e <- [eE] !e # <LEAF>
i <- [iI] !i # <LEAF>
o <- [oO] !o # <LEAF>
u <- [uU] !u # <LEAF>

h <- [hH] !h # <LEAF>
n <- [nN] !n # <LEAF>
r <- [rR] !r # <LEAF>
l <- [lL] !l # <LEAF>

b <- [bB] !b !unvoiced # <LEAF>
d <- [dD] !d !unvoiced # <LEAF>
g <- [gG] !g !unvoiced # <LEAF>
v <- [vV] !v !unvoiced # <LEAF>
j <- [jJ] !j !z !unvoiced # <LEAF>
z <- [zZ] !z !j !unvoiced # <LEAF>
s <- [sS] !s !c !voiced # <LEAF>
c <- [cC] !c !s !voiced # <LEAF>
k <- [kK] !k !voiced # <LEAF>
f <- [fF] !f !voiced # <LEAF>
p <- [pP] !p !voiced # <LEAF>
t <- [tT] !t !voiced # <LEAF>
m <- [mM] !m # <LEAF>

# - Spaces / Pause
post_word <- (pause_char &aeiou) / !sonorant &consonant / spaces
spaces <- space_char+ (pause_char &aeiou)? / pause_char &aeiou / EOF


# - Special characters
pause_char <- (['.]) !pause_char
space_char <- [\t\n\r?!\u0020]
digit <- [.0123456789] # <LEAF2>
EOF <- !.